from django.db import transaction
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from .models import Product, InventoryLog
from .serializers import InventoryLogSerializer

@api_view(['POST'])
@permission_classes([IsAuthenticated])
@transaction.atomic  # Ensures atomicity for inventory update and log creation
def create_inventory_log(request):
    """
    Create a new inventory log entry by product name and update product quantity.
    """
    data = request.data

    # Fetch product by name
    product_name = data.get('product_name')
    if not product_name:
        return Response({"error": "Product name is required"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        product = Product.objects.get(name=product_name)
    except Product.DoesNotExist:
        return Response({"error": "Product with the given name does not exist"}, status=status.HTTP_404_NOT_FOUND)

    # Prepare data for the serializer
    data['product'] = product.id
    data['user'] = request.user.id  # Associate the inventory log with the logged-in user

    serializer = InventoryLogSerializer(data=data)
    if serializer.is_valid():
        action = serializer.validated_data['action']
        quantity = serializer.validated_data['quantity']

        # Update product's stock quantity
        if action == 'add':
            product.stock_quantity += quantity
        elif action == 'remove':
            if product.stock_quantity < quantity:
                return Response({"error": "Insufficient stock to remove"}, status=status.HTTP_400_BAD_REQUEST)
            product.stock_quantity -= quantity

        product.save()  # Save the updated stock quantity

        # Save the inventory log
        serializer.save()
        return Response(
            {"message": "Inventory log created and stock quantity updated successfully", "data": serializer.data},
            status=status.HTTP_201_CREATED
        )

    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
