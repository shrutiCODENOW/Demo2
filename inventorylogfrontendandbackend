
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  AppBar,
  Toolbar,
  Typography,
  Button,
  Menu,
  MenuItem,
  Box,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';
import { Link } from 'react-router-dom';

function InventoryLog() {
  const [logs, setLogs] = useState([]);
  const [anchorEl, setAnchorEl] = useState(null);

  useEffect(() => {
    axios
      .get('http://127.0.0.1:8098/inventory-log/')
      .then((response) => setLogs(response.data))
      .catch((error) => console.error(error));
  }, []);

  const handleProfileMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleCloseMenu = () => {
    setAnchorEl(null);
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      {/* Navbar */}
      <AppBar position="static" sx={{ backgroundColor: '#1976d2' }}>
        <Toolbar>
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            Inventory Management
          </Typography>
          <Button color="inherit" component={Link} to="/dashboard">
            Dashboard
          </Button>
          <Button color="inherit" component={Link} to="/products">
            Products
          </Button>
          <Button color="inherit" component={Link} to="/inventory-log">
            Inventory Log
          </Button>
          <Button color="inherit" component={Link} to="/orders">
            Orders
          </Button>
          <Button color="inherit" component={Link} to="/graphs">
            Graphs
          </Button>
          <Button color="inherit" onClick={handleProfileMenuClick}>
            Profile
          </Button>
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleCloseMenu}
          >
            <MenuItem component={Link} to="/profile">
              View Profile
            </MenuItem>
            <MenuItem component={Link} to="/login">
              Log out
            </MenuItem>
          </Menu>
        </Toolbar>
      </AppBar>

      {/* Inventory Log Content */}
      <Box sx={{ p: 3, mt: 2 }}>
        <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 3 }}>
          Inventory Log
        </Typography>

        {/* Inventory Log Table */}
        <Paper elevation={3} sx={{ borderRadius: 2, p: 3 }}>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Product ID</TableCell>
                  <TableCell>Product Name</TableCell>
                  <TableCell>Category</TableCell>
                  <TableCell>Quantity</TableCell>
                  <TableCell>Date & Time</TableCell>
                  <TableCell>Remaining Quantity</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {logs.map((log, index) => (
                  <TableRow key={index}>
                    <TableCell>{log.product_id}</TableCell>
                    <TableCell>{log.product_name}</TableCell>
                    <TableCell>{log.product_category}</TableCell>
                    <TableCell
                      sx={{
                        color: log.quantity < 0 ? 'red' : 'green',
                        fontWeight: 'bold',
                      }}
                    >
                      {log.quantity}
                    </TableCell>
                    <TableCell>
                      {new Date(log.date_time).toLocaleString()}
                    </TableCell>
                    <TableCell>{log.remaining_quantity}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </Box>
    </Box>
  );
}

export default InventoryLog;


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def inventory_list(request):
    if request.method == 'GET':
        # Filter inventory logs by the logged-in user
        inventory_logs = InventoryLog.objects.filter(user=request.user)
        serializer = InventoryLogSerializer(inventory_logs, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

  @api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_inventory_log(request, pk):
    try:
        inventory_log = InventoryLog.objects.get(pk=pk, user=request.user)
        product = inventory_log.product
        
        # Reverse the stock adjustment
        if inventory_log.action.lower() == 'add':
            product.stock_quantity -= inventory_log.quantity
        elif inventory_log.action.lower() == 'remove':
            product.stock_quantity += inventory_log.quantity
        
        product.save()  # Save the updated stock quantity
        inventory_log.delete()  # Delete the log
        
        return Response({"message": "Inventory log deleted successfully and stock adjusted"}, status=status.HTTP_204_NO_CONTENT)
    except InventoryLog.DoesNotExist:
        return Response({"error": "Inventory log not found or not accessible"}, status=status.HTTP_404_NOT_FOUND)



@api_view(['PATCH'])
@permission_classes([IsAuthenticated])
def update_inventory_log(request, pk):
    """
    Update an inventory log entry by ID and adjust the product stock accordingly.
    """
    try:
        # Retrieve the inventory log and product details
        inventory_log = InventoryLog.objects.get(pk=pk, user=request.user)
        product = inventory_log.product
    except InventoryLog.DoesNotExist:
        return Response({"error": "Inventory log not found or not accessible"}, status=status.HTTP_404_NOT_FOUND)

    original_quantity = inventory_log.quantity
    original_action = inventory_log.action

    # Fetch updated data from the request body using 'get()'
    updated_quantity = request.data.get('quantity', original_quantity)  # Default to original if not provided
    updated_action = request.data.get('action', original_action)  # Default to original if not provided

    # Reverse the previous adjustment (to undo it)
    if original_action.lower() == 'add':
        product.stock_quantity -= original_quantity  # Undo the 'add' action
    elif original_action.lower() == 'remove':
        product.stock_quantity += original_quantity  # Undo the 'remove' action

    # Now apply the updated action and quantity
    if updated_action.lower() == 'add':
        product.stock_quantity += updated_quantity  # Apply the 'add' action
    elif updated_action.lower() == 'remove':
        # Ensure there's enough stock to remove
        if product.stock_quantity < updated_quantity:
            return Response({"error": "Insufficient stock to remove"}, status=status.HTTP_400_BAD_REQUEST)
        product.stock_quantity -= updated_quantity  # Apply the 'remove' action

    # Save the updated product stock
    product.save()

    # Now update the InventoryLog with the new values
    inventory_log.quantity = updated_quantity
    inventory_log.action = updated_action
    inventory_log.save()

    return Response(
        {"message": "Inventory log updated successfully and stock adjusted", "data": {
            "product": inventory_log.product.name,
            "quantity": updated_quantity,
            "action": updated_action,
            "stock_quantity": product.stock_quantity  # Show the updated stock quantity
        }},
        status=status.HTTP_200_OK
    )
    @api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_inventory_log_by_id(request, pk):
    """
    Retrieve an inventory log entry by ID.
    """
    try:
        # Fetch the inventory log by ID
        inventory_log = InventoryLog.objects.get(pk=pk, user=request.user)
    except InventoryLog.DoesNotExist:
        return Response({"error": "Inventory log not found or not accessible"}, status=status.HTTP_404_NOT_FOUND)

    # Serialize the inventory log data
    serializer = InventoryLogSerializer(inventory_log)

    return Response(serializer.data, status=status.HTTP_200_OK)
