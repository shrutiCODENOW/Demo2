@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_inventory_log(request, pk):
    """
    Delete an inventory log entry by ID.
    """
    try:
        inventory_log = InventoryLog.objects.get(pk=pk, user=request.user)
    except InventoryLog.DoesNotExist:
        return Response({"error": "Inventory log not found or not accessible"}, status=status.HTTP_404_NOT_FOUND)
    
    inventory_log.delete()
    return Response({"message": "Inventory log deleted successfully"}, status=status.HTTP_204
_NO_CONTENT)


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  AppBar, Toolbar, Typography, Button, Menu, MenuItem,
  Box, Grid, Paper, Table, TableBody, TableCell,
  TableContainer, TableHead, TableRow, TextField,
  Dialog, DialogTitle, DialogContent, DialogActions
} from '@mui/material';
import { Link } from 'react-router-dom';

function Products() {
  const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({
    name: '',
    category: '',
    description: '',
    price: '',
    stock_quantity: '',
    threshold: '',
    picture: null,
  });
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [view, setView] = useState('addProduct');
  const [anchorEl, setAnchorEl] = useState(null);

  useEffect(() => {
    if (view === 'existingProducts') {
      fetchProducts();
    }
  }, [view]);

  const fetchProducts = () => {
    axios
      .get('/api/user-products/')
      .then((response) => setProducts(response.data))
      .catch((error) => console.error('Error fetching products:', error));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewProduct({ ...newProduct, [name]: value });
  };

  const handleFileChange = (e) => {
    setNewProduct({ ...newProduct, picture: e.target.files[0] });
  };

  const handleAddProduct = (e) => {
    e.preventDefault();
    const formData = new FormData();
    Object.keys(newProduct).forEach((key) => {
      formData.append(key, newProduct[key]);
    });

    axios
      .post('/api/products/', formData)
      .then(() => {
        alert('Product added successfully!');
        setView('existingProducts');
      })
      .catch((error) => console.error('Error adding product:', error));
  };

  const handleUpdateProduct = (updatedProduct) => {
    axios
      .put(`/api/products/${updatedProduct.id}/`, updatedProduct)
      .then(() => {
        alert('Product updated successfully!');
        setOpenDialog(false);
        fetchProducts();
      })
      .catch((error) => console.error('Error updating product:', error));
  };

  const handleDeleteProduct = (productId) => {
    axios
      .delete(`/api/products/${productId}/`)
      .then(() => {
        alert('Product deleted successfully.');
        fetchProducts();
      })
      .catch((error) => console.error('Error deleting product:', error));
  };

  const handleOpenDialog = (product) => {
    setSelectedProduct(product);
    setOpenDialog(true);
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
  };

  const handleProfileMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleCloseMenu = () => {
    setAnchorEl(null);
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      {/* Navbar */}
      <AppBar position="static" sx={{ backgroundColor: '#1976d2' }}>
        <Toolbar>
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            Inventory Management
          </Typography>
          <Button color="inherit" component={Link} to="/dashboard">
            Dashboard
          </Button>
          <Button color="inherit" component={Link} to="/products">
            Products
          </Button>
          <Button color="inherit" component={Link} to="/inventory-log">
            Inventory Log
          </Button>
          <Button color="inherit" component={Link} to="/orders">
            Orders
          </Button>
          <Button color="inherit" onClick={handleProfileMenuClick}>
            Profile
          </Button>
          <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleCloseMenu}>
            <MenuItem component={Link} to="/profile">View Profile</MenuItem>
            <MenuItem component={Link} to="/login">Log out</MenuItem>
          </Menu>
        </Toolbar>
      </AppBar>

      {/* Page Content */}
      <Box sx={{ p: 3, mt: 2 }}>
        <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 3 }}>
          Products
        </Typography>

        {/* Toggle Buttons */}
        <Box className="flex gap-4 mb-4">
          <Button
            variant="contained"
            color={view === 'addProduct' ? 'primary' : 'default'}
            onClick={() => setView('addProduct')}
          >
            Add New Product
          </Button>
          <Button
            variant="contained"
            color={view === 'existingProducts' ? 'primary' : 'default'}
            onClick={() => setView('existingProducts')}
          >
            Existing Products
          </Button>
        </Box>

        {/* Add New Product Form */}
        {view === 'addProduct' && (
          <Paper elevation={3} sx={{ p: 3, borderRadius: 2, mb: 4 }}>
            <form onSubmit={handleAddProduct}>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField fullWidth label="Product Name" name="name" value={newProduct.name} onChange={handleInputChange} required />
                </Grid>
                {/* Additional Fields */}
                <Grid item xs={12}>
                  <Button variant="contained" type="submit" sx={{ mt: 2, backgroundColor: '#1976d2' }}>
                    Add Product
                  </Button>
                </Grid>
              </Grid>
            </form>
          </Paper>
        )}

        {/* Existing Products Table */}
        {view === 'existingProducts' && (
          <Paper elevation={3} sx={{ p: 3, borderRadius: 2 }}>
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>Name</TableCell>
                    <TableCell>Category</TableCell>
                    <TableCell>Price</TableCell>
                    <TableCell>Stock Quantity</TableCell>
                    <TableCell>Add to Inventory</TableCell>
                    <TableCell>Update</TableCell>
                    <TableCell>Delete</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {products.map((product) => (
                    <TableRow key={product.id}>
                      <TableCell>{product.id}</TableCell>
                      <TableCell>{product.name}</TableCell>
                      <TableCell>{product.category}</TableCell>
                      <TableCell>{product.price}</TableCell>
                      <TableCell>{product.stock_quantity}</TableCell>
                      <TableCell>
                        <Button onClick={() => alert('Feature under development')}>
                          Add
                        </Button>
                      </TableCell>
                      <TableCell>
                        <Button onClick={() => handleOpenDialog(product)}>
                          Update
                        </Button>
                      </TableCell>
                      <TableCell>
                        <Button onClick={() => handleDeleteProduct(product.id)}>
                          üóëÔ∏è
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        )}
      </Box>

      {/* Update Product Dialog */}
      {selectedProduct && (
        <Dialog open={openDialog} onClose={handleDialogClose}>
          <DialogTitle>Update Product</DialogTitle>
          <DialogContent>
            <TextField
              fullWidth
              margin="dense"
              label="Name"
              value={selectedProduct.name}
              onChange={(e) => setSelectedProduct({ ...selectedProduct, name: e.target.value })}
            />
            <TextField
              fullWidth
              margin="dense"
              label="Category"
              value={selectedProduct.category}
              onChange={(e) => setSelectedProduct({ ...selectedProduct, category: e.target.value })}
            />
            <TextField
              fullWidth
              margin="dense"
              type="number"
              label="Price"
              value={selectedProduct.price}
              onChange={(e) => setSelectedProduct({ ...selectedProduct, price: e.target.value })}
            />
            <TextField
              fullWidth
              margin="dense"
              type="number"
              label="Stock Quantity"
              value={selectedProduct.stock_quantity}
              onChange={(e) => setSelectedProduct({ ...selectedProduct, stock_quantity: e.target.value })}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleDialogClose}>Cancel</Button>
            <Button
              onClick={() => handleUpdateProduct(selectedProduct)}
              variant="contained"
            >
              Update
            </Button>
          </DialogActions>
        </Dialog>
      )}
    </Box>
  );
}

export default Products;

