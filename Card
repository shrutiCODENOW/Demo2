import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Box,
  Typography,
  CircularProgress,
  TextField,
  Card,
  CardContent,
  CardHeader
} from '@mui/material';
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import Navbar from './Navbar';

function Graphs() {
  const [logs, setLogs] = useState([]);
  const [chartData, setChartData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [categoryName, setCategoryName] = useState(''); // Added state for category name

  useEffect(() => {
    // Fetching logs data
    axios
      .get('http://127.0.0.1:8198/inventory-log/')
      .then((response) => setLogs(response.data))
      .catch((error) => console.error(error));

    // Fetching product data for the chart
    const fetchProductData = async () => {
      try {
        const token = localStorage.getItem('accessToken'); // Get token from localStorage
        const response = await axios.get('http://127.0.0.1:8198/api/get/user_product/', {
          headers: { Authorization: `Bearer ${token}` }, // Add token in headers for authentication
        });

        const categoryStock = {};

        // Loop through the products and sum the stock_quantity for each category
        response.data.forEach((product) => {
          // Use the category_name from the API response here
          if (product.stock_quantity > 0 && (!categoryName || product.category_name === categoryName)) {
            if (categoryStock[product.category_name]) {
              categoryStock[product.category_name] += product.stock_quantity;
            } else {
              categoryStock[product.category_name] = product.stock_quantity;
            }
          }
        });

        // Transforming the aggregated data for Pie Chart
        const chartData = Object.keys(categoryStock).map((category) => ({
          name: category,               // Use category_name here
          value: categoryStock[category], // Total stock quantity in that category
        }));

        setChartData(chartData); // Set the chart data
      } catch (error) {
        console.error('Failed to fetch product data:', error);
      } finally {
        setLoading(false); // Stop loading once the data is fetched
      }
    };

    fetchProductData(); // Call the function to fetch product data
  }, [categoryName]); // Re-fetch data whenever categoryName changes

  // Display loading spinner while data is being fetched
  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  // If no chart data is available
  if (!chartData.length) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <Typography variant="h6" color="error">
          Failed to load chart data or no data for the entered category.
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ flexGrow: 1 }}>
      <Navbar />

      {/* Graphs Content */}
      <Box sx={{ p: 3, mt: 2 }}>
        <Typography variant="h4" sx={{ fontWeight: 'bold', mb: 3 }}>
          Graphs
        </Typography>

        {/* Category Name Input */}
        <Box sx={{ mb: 3 }}>
          <TextField
            label="Category Name"
            variant="outlined"
            fullWidth
            value={categoryName}
            onChange={(e) => setCategoryName(e.target.value)} // Update categoryName
            placeholder="Enter category name"
          />
        </Box>

        {/* Pie Chart in Card */}
        <Card sx={{ boxShadow: 3, borderRadius: 2, mb: 3 }}>
          <CardHeader title="Category vs Stock Quantity (Pie Chart)" />
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={chartData}
                  dataKey="value"
                  nameKey="name" // Ensure nameKey is set to 'name', which contains category_name
                  outerRadius={120}
                  fill="#8884d8"
                  label
                >
                  {chartData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={getColor(index)} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </Box>
    </Box>
  );
}

// Function to generate a color for each slice of the pie chart
const getColor = (index) => {
  const colors = ['#FF8042', '#0088FE', '#00C49F', '#FFBB28', '#FF8042'];
  return colors[index % colors.length];
};

export default Graphs;
